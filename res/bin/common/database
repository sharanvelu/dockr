#!/bin/bash

## DockR by Sharan

# Source the Common Asset script
. "${DOCKR_COMMON_BIN_DIR}/asset"

# Import the specified Dump file to the provided DB in the respective DB_MODEL
import_database() {
    # Check if the required parameters are provided.
    if [ "${DT_DATABASE_NAME}" == "" ] || [ "${DT_DUMP_FILE}" == "" ]; then
        echo -e "${RED}Error :${CLR} Database Import statement requires two arguments : ${CYAN}DB_NAME${CLR} and ${CYAN}SQL_DUMP_FILE${CLR}"
        display_help "${DT_DATABASE_MODEL}_import"
        exit 1
    fi

    # Check if the provided sql_file_path contains any blank spaces to avoid error.
    if echo "${DT_DUMP_FILE}" | grep -q "\ "; then
        echo -e "${RED}Error :${CLR} Avoid blank spaces (\" \") in the file_path."
        echo -e "Provided File Path : ${CYAN}${DT_DUMP_FILE}${CLR}"

        exit 1
    fi

    # Check if the specified file exists or not.
    if [ ! -f "${DT_DUMP_FILE}" ]; then
        echo -e "Specified dump file ${CYAN}\"${DT_DUMP_FILE}\"${CLR} does not exists."
        echo -e "Please check the file."

        exit 1
    fi

    # Trim the host machine file_path to file_name to avoid "directory not found" issue inside the container.
    DT_CONTAINER_DUMP_FILE_PATH="/opt/$(echo ${DT_DUMP_FILE} | sed 's/.*\///')"

    # Copy the provided dump file to the container.
    copy_dump_file_to_container

    # Import the Dump file using Mysql Import Command
    if [ "${DT_DATABASE_MODEL}" == "mysql" ]; then
        docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec mysql \
            bash -c "MYSQL_PWD=${DOCKR_ASSET_PASSWORD} mysql -u root ${DT_DATABASE_NAME} < ${DT_CONTAINER_DUMP_FILE_PATH}"
    fi

    # Import the Dump file using Postgres Import Command
    if [ "${DT_DATABASE_MODEL}" == "postgres" ]; then
        if echo $* | grep -q -w "\-\-use\-pg_restore"; then
            docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec postgres \
                bash -c "pg_restore --no-privileges --no-owner --clean --no-acl -U ${DOCKR_ASSET_USERNAME} -d ${DT_DATABASE_NAME} -1 ${DT_CONTAINER_DUMP_FILE_PATH}"
        else
            docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec postgres \
                bash -c "psql -U ${DOCKR_ASSET_USERNAME} -d ${DT_DATABASE_NAME} < ${DT_CONTAINER_DUMP_FILE_PATH}"
        fi
    fi

    # Delete the Dump file from the container
    delete_dump_file_from_container
}

# Copy the provided dump file to the container.
copy_dump_file_to_container() {
    DT_DATABASE_CONTAINER_ID=$(docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" ps -q "${DT_DATABASE_MODEL}")
    # Copy the Dump file into container
    docker cp "${DT_DUMP_FILE}" ${DT_DATABASE_CONTAINER_ID}:${DT_CONTAINER_DUMP_FILE_PATH}
}

# Delete the Dump file from the container
delete_dump_file_from_container() {
    docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec ${DT_DATABASE_MODEL} \
        bash -c "rm -rf ${DT_CONTAINER_DUMP_FILE_PATH}"
}

# Start a SSH bash session
start_bash_session() {
    docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec "${DT_DATABASE_MODEL}" bash
}

# Create Project Database
create_project_database() {
    should_start_asset "${DB_CONNECTION}"
    if [ $? == 1 ]; then
        echo -e "\n${PROCESS}Checking for database ${CYAN}${DB_DATABASE}${CLR} presence in ${DB_CONNECTION}."

        # Create DB with specified name if it is not present.
        # If DB is "MYSQL"
        if [ "${DB_CONNECTION}" == "mysql" ]; then
            if ! docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec mysql bash -c "MYSQL_PWD=${DOCKR_ASSET_PASSWORD} mysql -u root -e \"show databases;\" | grep -q -w ${DB_DATABASE}"; then
                echo -e "Creating Database ${CYAN}${DB_DATABASE}${CLR}."
                docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec mysql bash -c "MYSQL_PWD=${DOCKR_ASSET_PASSWORD} mysql -u root -e \"create database ${DB_DATABASE}\" >> /dev/null"
                docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec mysql bash -c "MYSQL_PWD=${DOCKR_ASSET_PASSWORD} mysql -u root -e \"GRANT ALL PRIVILEGES ON *.* TO '${DOCKR_ASSET_USERNAME}'@'%'\" >> /dev/null"
                echo -e "Database ${CYAN}${DB_DATABASE}${CLR} created successfully."
            else
                echo -e "Database ${CYAN}${DB_DATABASE}${CLR} already exists. Skipping..."
            fi

        # If DB is "POSTGRES"
        elif [ "${DB_CONNECTION}" == "pgsql" ]; then
            if ! docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec postgres bash -c "psql -U ${DOCKR_ASSET_USERNAME} -l | grep -q -w ${DB_DATABASE}"; then
                echo -e "Creating Database ${CYAN}${DB_DATABASE}${CLR}."
                docker-compose -f "${DOCKR_COMPOSE_ASSET}" -p "${DOCKR_ASSET_PROJECT_NAME}" exec postgres bash -c "psql -U ${DOCKR_ASSET_USERNAME} -d ${DOCKR_ASSET_DEFAULT_DATABASE} -c \"create database ${DB_DATABASE}\" >> /dev/null"
                echo -e "Database ${CYAN}${DB_DATABASE}${CLR} created successfully."
            else
                echo -e "Database ${CYAN}${DB_DATABASE}${CLR} already exists. Skipping..."
            fi
        fi
    fi
}
